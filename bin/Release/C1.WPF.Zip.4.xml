<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>C1.WPF.Zip.4</name>
  </assembly>
  <members>
    <member name="T:C1.C1Zip.C1ZipEntry">
      <summary>zip ファイル内の１つのエントリを表し、エントリ名、圧縮サイズ、非圧縮サイズ、日付、チェックサムなどを含む情報を公開します。</summary>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntry.CheckCRC32">
      <summary>エントリのチェックサム値を計算し、エントリの作成時に保存されたチェックサムとこの値を比較します。</summary>
      <returns>チェックサム値が一致する場合は true、そうでない場合は false。</returns>
      <remarks>
        このメソッドは、zip ファイル内のエントリの整合性をチェックするために使用されます。計算されたチェックサムが保存されているチェックサムと一致しない場合は、zip ファイルが破損しているか、zip ファイルの作成に使用されたプログラムが
        <b>C1Zip</b>と互換性がありません。
      </remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntry.CheckPassword">
      <summary>
        現在設定されているパスワードでこの
        <see cref="T:C1.C1Zip.C1ZipEntry" />を読み取ることができるかどうかをチェックします。
      </summary>
      <returns>現在のパスワードでエントリを読み取ることができる場合、またはエントリが暗号化されていない場合は true。</returns>
      <remarks>このメソッドは、現在のパスワードがこのエントリに有効かどうかを判定するために、try/catch ブロックを使ってエントリを開いてみる方法より効率的です。</remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntry.OpenReader">
      <summary>
        エントリのコンテンツをディスクファイルに抽出することなく読み取るために使用できる
        <see cref="T:System.IO.Stream" />を返します。
      </summary>
      <returns>
        エントリ内のデータを読み取るために使用できる
        <see cref="T:System.IO.Stream" />。
      </returns>
      <remarks>
        返される
        <see cref="T:System.IO.Stream" />は
        <see cref="T:C1.C1Zip.C1ZStreamReader" />です。これは、データをエントリから読み取りながら圧縮解除します。
      </remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntry.Extract(System.String)">
      <summary>このエントリをファイルに抽出します。</summary>
      <param name="destFileName">抽出されたファイルの名前と場所です。</param>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntry.Remove">
      <summary>このエントリを zip ファイルから削除します。</summary>
    </member>
    <member name="P:C1.C1Zip.C1ZipEntry.FileName">
      <summary>エントリ名を取得します。通常、これはファイル名で、オプションでパスが含まれます。</summary>
    </member>
    <member name="P:C1.C1Zip.C1ZipEntry.SizeUncompressed">
      <summary>エントリの元（非圧縮）のサイズ（バイト単位）を取得します。</summary>
    </member>
    <member name="P:C1.C1Zip.C1ZipEntry.SizeCompressed">
      <summary>エントリの圧縮サイズ（バイト単位）を取得します。</summary>
    </member>
    <member name="P:C1.C1Zip.C1ZipEntry.SizeUncompressedLong">
      <summary>エントリの元の（非圧縮）サイズ（バイト単位、長整数）を取得します。</summary>
    </member>
    <member name="P:C1.C1Zip.C1ZipEntry.SizeCompressedLong">
      <summary>エントリの圧縮後のサイズ（バイト単位、長整数）を取得します。</summary>
    </member>
    <member name="P:C1.C1Zip.C1ZipEntry.CRC32">
      <summary>エントリの圧縮時に計算されたチェックサムを取得します。</summary>
      <remarks>この値を使用して、エントリを圧縮解除するときにエントリの整合性をチェックできます。</remarks>
    </member>
    <member name="P:C1.C1Zip.C1ZipEntry.Date">
      <summary>エントリの作成に使用されたファイルが最後に変更された日時を取得します。</summary>
      <remarks>この値を使用して、ソースファイルが最後に圧縮されてから変更されたため、エントリを更新する必要があるかどうかをチェックできます。</remarks>
    </member>
    <member name="P:C1.C1Zip.C1ZipEntry.Comment">
      <summary>エントリに関連付けられたコメントを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Zip.C1ZipEntry.Attributes">
      <summary>エントリに関連付けられたファイル属性を取得します。</summary>
    </member>
    <member name="P:C1.C1Zip.C1ZipEntry.IsEncrypted">
      <summary>エントリを暗号化するかどうかを決定する値を取得します。</summary>
      <remarks>
        暗号化されているエントリを抽出するには、そのエントリを含む
        <see cref="T:C1.C1Zip.C1ZipFile" />オブジェクトの
        <see cref="P:C1.C1Zip.C1ZipFile.Password" />プロパティが、そのファイルが zip ファイルに追加されたときに使用されたパスワードに設定されている必要があります。
      </remarks>
    </member>
    <member name="P:C1.C1Zip.C1ZipEntry.CompressionRatio">
      <summary>このエントリに適用される圧縮率を取得します。</summary>
    </member>
    <member name="T:C1.C1Zip.C1ZipEntryCollection">
      <summary>
        zip ファイルのコンテンツを表す
        <see cref="T:C1.C1Zip.C1ZipEntry" />オブジェクトのコレクション。
      </summary>
      <remarks>
        zip ファイルのコンテンツをプログラムで管理するには、
        <b>C1ZipEntryCollection</b>を使用します。その
        <b>C1ZipEntryCollection</b>に項目を追加、削除、抽出、または挿入することができます。
      </remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.Contains(System.String)">
      <summary>このコレクションに特定の名前のエントリが含まれるかどうかを判定します。</summary>
      <param name="name">検索するエントリの名前。</param>
      <returns>コレクションに特定の名前のエントリが含まれる場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.IndexOf(System.String)">
      <summary>指定された名前を持つエントリのインデックスを取得します。</summary>
      <param name="name">検索するエントリの名前。</param>
      <returns>コレクション内のエントリのインデックス。エントリが見つからなかった場合は -1。</returns>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.IO.Stream,System.String,System.DateTime)">
      <summary>現在の zip ファイルにストリームを追加します。</summary>
      <param name="stream">新しいエントリのデータを含むストリーム。</param>
      <param name="entryName">新しいエントリに使用する名前。</param>
      <param name="dateTime">ファイルが最後に変更された日時。</param>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.IO.Stream,System.String)">
      <summary>現在の zip ファイルにストリームを追加します。</summary>
      <param name="stream">新しいエントリのデータを含むストリーム。</param>
      <param name="entryName">新しいエントリに使用する名前。</param>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.String)">
      <summary>現在の zip ファイルにエントリを追加します。</summary>
      <param name="fileName">zip ファイルに追加するファイルの名前。</param>
      <remarks>
        デフォルトでは、ディレクトリ名は zip ファイルに格納されません。ディレクトリ名の一部を zip ファイルに格納するには、
        <b>pathLevels</b>パラメータを持つオーバーロードバージョンの
        <b>Add</b>メソッドを使用します。
      </remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.String[])">
      <summary>現在の zip ファイルに一連のエントリを追加します。</summary>
      <param name="fileNames">zip ファイルに追加するエントリのファイル名を含む配列。</param>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.String,System.Int32)">
      <summary>現在の zip ファイルにエントリを追加します。</summary>
      <param name="fileName">zip ファイルに追加するファイルの名前。</param>
      <param name="pathLevels">エントリ名として格納するパスレベルの数。</param>
      <remarks>
        <para>デフォルトでは、パス名は zip ファイルに格納されません。たとえば、ファイル "c:\temp\samples\readme.txt" を zip ファイルに追加すると、"readme.txt" というエントリが作成されます。</para>
        <para>
          <paramref name="pathLevels" />パラメータを使用すると、エントリ名に１つ以上のレベルのパスを格納できます。たとえば、
          <paramref name="pathLevels" />=1 を設定して、ファイル "c:\temp\samples\readme.txt" を zip ファイルに追加すると、"samples\readme.txt" というエントリが作成されます。
        </para>
      </remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.String,System.String)">
      <summary>現在の zip ファイルにエントリを追加します。</summary>
      <param name="fileName">zip ファイルに追加するファイルの名前。</param>
      <param name="entryName">zip ファイルに格納される新しいエントリの名前。</param>
      <remarks>デフォルトでは、zip ファイル内のエントリは、元の（非圧縮）ファイルと同じ名前になります。このメソッドを使用すると、パスを含む別の名前を指定できます。</remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.Add(System.String,System.String,System.DateTime)">
      <summary>現在の zip ファイルにエントリを追加します。</summary>
      <param name="fileName">zip ファイルに追加するファイルの名前。</param>
      <param name="entryName">zip ファイルに格納される新しいエントリの名前。</param>
      <param name="dateTime">ファイルが最後に変更された日時。</param>
      <remarks>デフォルトでは、zip ファイル内のエントリは、元の（非圧縮）ファイルと同じ名前になります。このメソッドを使用すると、パスを含む別の名前を指定できます。</remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.AddFolder(System.String)">
      <summary>フォルダのコンテンツを現在の zip ファイルに追加します。</summary>
      <param name="path">zip ファイルに追加するフォルダの完全パス。</param>
      <remarks>このメソッドは、すべてのファイルとサブフォルダを zip ファイルに追加します。</remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.AddFolder(System.String,System.String)">
      <summary>フォルダのコンテンツを現在の zip ファイルに追加します。</summary>
      <param name="path">zip ファイルに追加するフォルダの完全パス。</param>
      <param name="searchPattern">追加するファイルを指定するマスク。</param>
      <remarks>フォルダにサブフォルダが含まれている場合は、それらも zip ファイルに追加されます。</remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.AddFolder(System.String,System.String,System.Boolean)">
      <summary>フォルダのコンテンツを現在の zip ファイルに追加します。</summary>
      <param name="path">zip ファイルに追加するフォルダの完全パス。</param>
      <param name="searchPattern">追加するファイルを指定するマスク。</param>
      <param name="includeSubfolders">サブフォルダを含める場合は true、ルートレベルのファイルのみを含める場合は false。</param>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.ExtractFolder(System.String)">
      <summary>指定されたパスに zip ファイルのコンテンツを抽出します。</summary>
      <param name="path">展開ファイルの出力先パス。</param>
      <remarks>zip ファイル内にフォルダが圧縮されている場合は、出力先パスの下に新しいフォルダが作成されて、アーカイブの階層構造が維持されます。</remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.Remove(System.Int32)">
      <summary>現在の zip ファイルからエントリを削除します。</summary>
      <param name="index">削除するエントリのインデックス。</param>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.Remove(System.String)">
      <summary>現在の zip ファイルからエントリを削除します。</summary>
      <param name="fileName">削除するエントリの名前（大文字小文字を区別）。</param>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.Remove(System.Int32[])">
      <summary>現在の zip ファイルからいくつかのエントリを削除します。</summary>
      <param name="indices">削除するエントリのインデックスを含む配列。</param>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.Remove(System.String[])">
      <summary>現在の zip ファイルからいくつかのエントリを削除します。</summary>
      <param name="entryNames">削除するエントリの名前を含む配列。</param>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.Extract(System.Int32,System.String)">
      <summary>現在の zip ファイルから１つのファイルを抽出します。</summary>
      <param name="index">抽出するエントリのインデックス。</param>
      <param name="destFileName">抽出されたファイルの名前と場所です。</param>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.Extract(System.String,System.String)">
      <summary>現在の zip ファイルから１つのファイルを抽出します。</summary>
      <param name="entryName">抽出するエントリの名前。</param>
      <param name="destFileName">抽出されたファイルの名前と場所です。</param>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.Extract(System.Int32)">
      <summary>現在の zip ファイルから１つのファイルを抽出します。</summary>
      <param name="index">抽出するエントリのインデックス。</param>
      <remarks>エントリは、現在の zip ファイルと同じフォルダ内のファイルに、エントリと同じ名前で抽出されます。</remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.Extract(System.String)">
      <summary>現在の zip ファイルから１つのファイルを抽出します。</summary>
      <param name="entryName">抽出するエントリの名前。</param>
      <remarks>エントリは、現在の zip ファイルと同じフォルダ内のファイルに、エントリと同じ名前で抽出されます。</remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.OpenWriter(System.String,System.Boolean)">
      <summary>zip ファイルに１つのエントリを書き込むためのストリームを開きます。</summary>
      <param name="entryName">新しいエントリの名前。</param>
      <param name="useMemory">メモリストリームと一時ファイルのどちらを使用するか。</param>
      <returns>zip ファイルにデータを書き込むために使用できるストリーム。ストリームが閉じるまでエントリは追加されません。</returns>
    </member>
    <member name="M:C1.C1Zip.C1ZipEntryCollection.OpenWriter(System.String,System.DateTime,System.Boolean)">
      <summary>zip ファイルに１つのエントリを書き込むためのストリームを開きます。</summary>
      <param name="entryName">新しいエントリの名前。</param>
      <param name="dateTime">ファイルが最後に変更された日時。</param>
      <param name="useMemory">メモリストリームと一時ファイルのどちらを使用するか。</param>
      <returns>zip ファイルにデータを書き込むために使用できるストリーム。ストリームが閉じるまでエントリは追加されません。</returns>
    </member>
    <member name="P:C1.C1Zip.C1ZipEntryCollection.Item(System.String)">
      <summary>
        指定された名前の
        <see cref="T:C1.C1Zip.C1ZipEntry" />を取得します。エントリが見つからない場合は、null を返します。
      </summary>
    </member>
    <member name="T:C1.C1Zip.C1ZipFile">
      <summary>zip ファイルの作成、オープン、管理に使用されます。</summary>
      <remarks>
        <para>
          C1Zip ファイルオブジェクトをディスク内の zip ファイルに関連付けるには、
          <see cref="M:C1.C1Zip.C1ZipFile.Open(System.String)" />メソッドまたは
          <see cref="M:C1.C1Zip.C1ZipFile.Create(System.String)" />メソッドを使用します。次に、zip ファイル内の個々のエントリを追加、削除、取得、または調査するには、
          <see cref="P:C1.C1Zip.C1ZipFile.Entries" />プロパティを使用します。
        </para>
        <para>
          <see cref="T:C1.C1Zip.C1ZipFile" />は、標準の zip ファイルでのみ使用できます。このコンポーネントは、gzip、zip2、tar、rar などの他の似た形式をサポートしません。
        </para>
        <para>標準の zip ファイルは、各エントリのサイズに制限を課します。これを使用して、４ギガバイト（uint.MaxValue）を超えるファイルを圧縮することはできません。</para>
      </remarks>
      <example>
        以下のコードは、
        <b>sources.zip</b>という名前の zip ファイルを作成し、 "cs" 拡張子を持つすべてファイルをこの zip ファイルに追加します。
        <code><![CDATA[
          // zip ファイルと圧縮するファイルのパスを取得します
          string path = Application.ExecutablePath;
          int pos = path.IndexOf(@"\bin");
          path = path.Substring(0, pos + 1);
          
          // zip ファイルを作成します
          C1ZipFile zip = new C1ZipFile();
          zip.Create(path + "source.zip");
          
          // cs 拡張子を持つすべてのファイルを zip ファイルに追加します
          foreach (string fileName in Directory.GetFiles(path, "*.cs"))
            zip.Entries.Add(fileName);
          
          // 結果を表示します
          foreach (C1ZipEntry ze in zip.Entries)
          {
            Console.WriteLine("{0} {1:#,##0} {2:#,##0}", ze.FileName, ze.SizeUncompressed, ze.SizeCompressed);
          }
          ]]></code></example>
    </member>
    <member name="M:C1.C1Zip.C1ZipFile.#ctor">
      <summary>
        <see cref="T:C1.C1Zip.C1ZipFile" />クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Zip.C1ZipFile.#ctor(System.String,System.Boolean)">
      <summary>
        <see cref="T:C1.C1Zip.C1ZipFile" />クラスの新しいインスタンスを初期化し、この新しいインスタンスに関連付けられた zip ファイルを作成または開きます。
      </summary>
      <param name="fileName">開くまたは作成する zip ファイルの名前。</param>
      <param name="create">新しい zip ファイルを作成する場合は true、既存のファイルを開く場合は false。</param>
      <remarks>
        <para>
          <paramref name="create" />が true で、zip ファイルが既に存在する場合は、既存のファイルが新しい空のファイルで上書きされます。
        </para>
        <para>
          <paramref name="create" />が false で、zip ファイルが既に存在する場合は、既存のファイルが開きます。
        </para>
      </remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipFile.#ctor(System.String)">
      <summary>
        <see cref="T:C1.C1Zip.C1ZipFile" />クラスの新しいインスタンスを初期化し、この新しいインスタンスに関連付けられた zip ファイルを開きます。
      </summary>
      <param name="fileName">開く zip ファイルの名前。</param>
      <remarks>ファイルが存在しない場合は、新しい空のファイルが作成されます。</remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipFile.#ctor(System.IO.Stream,System.Boolean)">
      <summary>
        <see cref="T:C1.C1Zip.C1ZipFile" />クラスの新しいインスタンスを初期化し、この新しいインスタンスに関連付けられた zip ストリームを開きます。
      </summary>
      <param name="stream">
        zip データを含む
        <see cref="T:System.IO.Stream" />。
      </param>
      <param name="create">空の zip ヘッダーでストリームを初期化するか、ストリームの既存の zip ファイルを開きます。</param>
    </member>
    <member name="M:C1.C1Zip.C1ZipFile.#ctor(System.IO.Stream)">
      <summary>
        <see cref="T:C1.C1Zip.C1ZipFile" />クラスの新しいインスタンスを初期化し、この新しいインスタンスに関連付けられた zip ストリームを開きます。
      </summary>
      <param name="stream">
        zip データを含む
        <see cref="T:System.IO.Stream" />。
      </param>
    </member>
    <member name="M:C1.C1Zip.C1ZipFile.Open(System.String)">
      <summary>既存の zip ファイルを開きます。</summary>
      <param name="fileName">既存の zip ファイルのパスを含む名前。</param>
      <remarks>
        <para>
          このメソッドは、zip ファイルが存在し、それが有効な zip ファイルかどうかを確認してから、zip ファイルディレクトリを
          <see cref="P:C1.C1Zip.C1ZipFile.Entries" />コレクションに読み取ります。次に、zip ファイルが閉じられ、他のアプリケーションで使用できるようになります。zip ファイルを明示的に閉じる必要はありません。
        </para>
      </remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipFile.Create(System.String)">
      <summary>ディスクに空の zip ファイルを作成します。</summary>
      <param name="fileName">作成する zip ファイルのパスを含む名前。</param>
      <remarks>同じ名前のファイルが既に存在する場合は、そのファイルを削除してから新しいファイルが作成されます。</remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipFile.Open(System.IO.Stream)">
      <summary>ストリームに格納されている既存の zip ファイルを開きます。</summary>
      <param name="stream">
        zip ファイルを含む
        <see cref="T:System.IO.Stream" />。
      </param>
      <remarks>
        <para>このメソッドを使用すると、実際のファイルではなく、ストリームに格納されている zip ファイルを開いて操作できます。</para>
        <para>このメソッドを使用する典型的な例には、zip ファイルがアプリケーションリソースとして、またはバイナリデータベースフィールドに格納されている場合があります。</para>
      </remarks>
      <example>
        <para>以下の例は、埋め込みリソースに格納されている zip ファイルから情報をロードします。 アプリケーションに zip ファイルを埋め込むには、次の手順に従います。</para>
        <para>
          1) Visual Studio でプロジェクトノードを右クリックし、
          <b>［追加］→［既存の項目の追加］</b>メニューオプションを選択します。
        </para>
        <para>2) 埋め込みリソースとしてプロジェクトに追加する zip ファイルを選択します。</para>
        <para>
          3) 新しく追加するファイルを選択し、
          <b>［ビルドアクション］</b>プロパティが［埋め込まれたリソース］に設定されていることを確認します。
        </para>
        <code><![CDATA[
          // アプリケーションリソースからストリームを取得します
          System.Reflection.Assembly a = this.GetType().Assembly;
          using (Stream stream = a.GetManifestResourceStream("MyApp.test.zip"))
          {
            // ストリームの C1ZipFile を開きます
            zip.Open(stream);
            
            // zip ファイルのエントリを列挙します
            foreach (C1ZipEntry ze in zip.Entries)
            {
              // 'txt' 拡張子を持つエントリを表示します
              if (ze.FileName.ToLower().EndsWith(".txt"))
              {
                using (StreamReader sr = new StreamReader(ze.OpenReader()))
                {
                  MessageBox.Show(sr.ReadToEnd(), ze.FileName);
                }
              }
            }
          }
          ]]></code>
      </example>
    </member>
    <member name="M:C1.C1Zip.C1ZipFile.Create(System.IO.Stream)">
      <summary>新しい zip ファイルをストリームに作成します。</summary>
      <param name="stream">
        新しい zip ファイルを含む
        <see cref="T:System.IO.Stream" />。
      </param>
      <example>
        以下のコードは、新しい
        <see cref="T:C1.C1Zip.C1ZipFile" />をメモリストリームに作成し、 それにいくつかのファイルを追加します。最後に、zip 形式で圧縮されたデータをバイト配列として取得します。 たとえば、これをデータベースに格納できます。
        <code><![CDATA[
          // ストリームに zip を作成します
          MemoryStream msZip = new MemoryStream();
          C1ZipFile zip = new C1ZipFile(msZip, true);
          
          // それにいくつかのエントリを追加します
          foreach (string f in Directory.GetFiles(@"c:\WINDOWS\Web\Wallpaper"))
          {
            zip.Entries.Add(f);
          }
          
          // zip 形式で圧縮されたデータをバイト配列として取得します
          byte[] zipData = msZip.ToArray();
          ]]></code></example>
    </member>
    <member name="M:C1.C1Zip.C1ZipFile.Close">
      <summary>
        <see cref="T:C1.C1Zip.C1ZipFile" />オブジェクトのすべてのデータメンバをリセットします。
      </summary>
      <remarks>
        ディスクファイルは、
        <b>C1Zip</b>によって自動的に閉じられます。
        <see cref="T:C1.C1Zip.C1ZipFile" />クラスと物理 zip ファイルの間の接続を切断する場合は、このメソッドを使用するだけで済みます。
      </remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipFile.Refresh">
      <summary>現在の zip ファイルを開き直すことで、すべてのデータメンバをリフレッシュします。</summary>
      <remarks>
        他のアプリケーションが zip ファイルを変更した可能性があり、
        <see cref="P:C1.C1Zip.C1ZipFile.Entries" />コレクションの情報を最新の状態にする場合は、このメソッドが便利です。
      </remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZipFile.IsZipFile(System.String)">
      <summary>ファイルが有効な zip ファイルであるかどうかをテストします。</summary>
      <param name="fileName">テストするファイルの名前。</param>
      <returns>ファイルが存在し、有効な zip ファイルである場合は true、そうでない場合は false。</returns>
    </member>
    <member name="M:C1.C1Zip.C1ZipFile.IsZipFile(System.IO.Stream)">
      <summary>ストリームに有効な zip ファイルが含まれるかどうかをテストします。</summary>
      <param name="stream">
        テストする
        <see cref="T:System.IO.Stream" />。
      </param>
      <returns>
        <paramref name="stream" />に有効な zip ファイルが含まれる場合は true、そうでない場合は false。
      </returns>
    </member>
    <member name="M:C1.C1Zip.C1ZipFile.OpenBatch">
      <summary>複数の操作を行うために zip ファイルを開きます。</summary>
      <remarks>
        <para>
          デフォルトでは、エントリが追加または削除されるときに、
          <see cref="T:C1.C1Zip.C1ZipFile" />が zip ファイルを自動的に開いたり閉じます。
        </para>
        <para>
          これにより、ある種のウイルス対策ソフトウェアがインストールされているシステムや、比較的小さなエントリを大量に追加する状況で、遅延が発生する可能性があります。このような場合は、
          <see cref="M:C1.C1Zip.C1ZipFile.OpenBatch" />メソッドと
          <see cref="M:C1.C1Zip.C1ZipFile.CloseBatch" />メソッドを使用して、操作全体が終わるまで zip ファイルを開いたままにします。
        </para>
        <para>
          例外が発生した場合でも、
          <see cref="M:C1.C1Zip.C1ZipFile.CloseBatch" />メソッドが必ず呼び出されるように、finally 句を使用します。
        </para>
      </remarks>
      <example>
        以下のコードは、zip ファイルを開き、それにいくつかのエントリを追加し、ファイル を閉じます。
        <code><![CDATA[
          C1ZipFile zip = new C1ZipFile();
          zip.Open(myzipfile);
          try
          {
            zip.OpenBatch();
            foreach (string fileName in Directory.GetFiles(path, "*.*"))
              zip.Entries.Add(fileName);
          }
          finally
          {
            zip.CloseBatch();
          }
          ]]></code></example>
    </member>
    <member name="M:C1.C1Zip.C1ZipFile.CloseBatch">
      <summary>
        <see cref="M:C1.C1Zip.C1ZipFile.OpenBatch" />メソッドの呼び出しを使って zip ファイルを開いた後で、そのファイルを閉じます。
      </summary>
      <remarks>
        詳細な説明とサンプルについては、
        <see cref="M:C1.C1Zip.C1ZipFile.OpenBatch" />メソッドを参照してください。
      </remarks>
    </member>
    <member name="E:C1.C1Zip.C1ZipFile.Progress">
      <summary>zip ファイルとの間でデータが読み書きされている間に発生します。</summary>
      <remarks>通常、長い操作中にアプリケーションの UI を更新するために、このイベントを使用します。また、操作をキャンセルするために使用することもできます。</remarks>
      <example>
        以下のコードは、アプリケーションがファイルを圧縮している間に、出力ウィンドウに メッセージを書き込みます。
        <code><![CDATA[
          private void Compress()
          {
            // zip ファイルを作成します
            C1Zip zip = new C1Zip();
            zip.Create(zipFileName);
            
            // イベントハンドラを接続します
            zip.Progress += new ZipProgressEventHandler(zip_Progress);
            
            // ファイルを追加します
            foreach (string fileName in Directory.GetFiles(path, "*.*"))
              zip.Entries.Add(fileName);
          }
          
          // ファイルの圧縮中にメッセージを出力します
          private void zip_Progress(object sender, ZipProgressEventArgs e)
          {
            Console.WriteLine("Compressing {0}, {1:p0} done", e.FileName, e.Position/(float)e.FileLength);
          }
          ]]></code></example>
    </member>
    <member name="P:C1.C1Zip.C1ZipFile.FileName">
      <summary>現在の zip ファイルの名前を取得します。</summary>
    </member>
    <member name="P:C1.C1Zip.C1ZipFile.Password">
      <summary>zip ファイルとの間でエントリを追加または取得するときに使用するパスワードを取得または設定します。</summary>
      <remarks>
        <para>
          <see cref="P:C1.C1Zip.C1ZipFile.Password" />プロパティを空以外の文字列に設定している場合、zip ファイルに追加したエントリは暗号化され、パスワードで保護されます。これらのエントリを後で抽出するには、同じパスワードを使用する必要があります。
        </para>
        <para>パスワードは、設定したときからすべてのエントリに適用されます。パスワードを空以外の文字列に設定し、いくつかのエントリを zip ファイルに追加すると、すべてのエントリで同じパスワードが使用されます。</para>
        <para>
          <b>C1Zip</b>は Unicode 文字が入ったパスワードをサポートしますが、一般的な zip ユーティリティのいくつかはサポートしていません。暗号化された zip ファイルをサードパーティのユーティリティで開くことができるようにするには、ASCII 文字だけのパスワードを使用してください。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Zip.C1ZipFile.Comment">
      <summary>現在の zip ファイルに関連付けられたコメントを取得または設定します。</summary>
    </member>
    <member name="P:C1.C1Zip.C1ZipFile.CompressionLevel">
      <summary>エントリを zip ファイルに追加するときに使用する圧縮レベルを取得または設定します。</summary>
      <remarks>
        高圧縮設定では、作成されるファイルが小さくなりますが、処理に時間がかかります。デフォルト設定（
        <see cref="F:C1.C1Zip.CompressionLevelEnum.DefaultCompression" />）は、圧縮と速度のバランスが最適です。
      </remarks>
    </member>
    <member name="P:C1.C1Zip.C1ZipFile.Entries">
      <summary>
        zip ファイルのエントリが入った
        <see cref="T:C1.C1Zip.C1ZipEntryCollection" />を取得します。
      </summary>
      <remarks>
        <see cref="P:C1.C1Zip.C1ZipFile.Entries" />コレクションは、zip ファイルのエントリを列挙するために使用されるほか、エントリを追加、削除、および展開するためにも使用されます。
      </remarks>
    </member>
    <member name="P:C1.C1Zip.C1ZipFile.OverwriteReadOnly">
      <summary>zip ファイルからエントリを抽出するときに、コンポーネントが読み取り専用ファイルを上書きするかどうかを決定します。</summary>
    </member>
    <member name="P:C1.C1Zip.C1ZipFile.OverwriteHidden">
      <summary>zip ファイルからエントリを抽出するときに、コンポーネントが非表示ファイルを上書きするかどうかを決定します。</summary>
    </member>
    <member name="P:C1.C1Zip.C1ZipFile.OverwriteSystem">
      <summary>zip ファイルからエントリを抽出するときに、コンポーネントがシステムファイルを上書きするかどうかを決定します。</summary>
    </member>
    <member name="P:C1.C1Zip.C1ZipFile.MemoryThreshold">
      <summary>メモリで圧縮される最大ストリームサイズを取得または設定します。</summary>
      <remarks>
        <para>
          <see cref="T:C1.C1Zip.C1ZipFile" />は、zip ファイルにエントリを追加する前に、一時ストリームにエントリを圧縮します。
        </para>
        <para>
          <see cref="P:C1.C1Zip.C1ZipFile.MemoryThreshold" />バイトより小さいエントリは、一時メモリストリームを使って圧縮されます。
        </para>
        <para>
          <see cref="P:C1.C1Zip.C1ZipFile.MemoryThreshold" />バイトより大きいエントリは、一時ファイルを使って圧縮されます。一時ファイルの場所は、
          <see cref="P:C1.C1Zip.C1ZipFile.TempFileName" />プロパティを使って制御できます。
        </para>
      </remarks>
    </member>
    <member name="P:C1.C1Zip.C1ZipFile.TempFileName">
      <summary>エントリを zip ファイルに追加するときに使用する一時ファイルの名前を取得または設定します。</summary>
      <remarks>
        <para>
          <see cref="T:C1.C1Zip.C1ZipFile" />は、エントリを zip ファイルに追加するときに一時ストリームを作成します。これらの一時ストリームは、エントリのサイズと
          <see cref="P:C1.C1Zip.C1ZipFile.MemoryThreshold" />プロパティの設定に応じて、メモリベースまたはディスクベースになります。
        </para>一時ファイルを使用する場合は、
        <see cref="T:C1.C1Zip.C1ZipFile" />の
        <see cref="P:C1.C1Zip.C1ZipFile.TempFileName" />プロパティを設定して、ファイルの場所を制御できます。一時ファイルのパスを選択しなかった場合、
        <see cref="T:C1.C1Zip.C1ZipFile" />は、
        <see cref="M:System.IO.Path.GetTempFileName" />メソッドを使って自動的に一時ファイルを作成します。
      </remarks>
    </member>
    <member name="T:C1.C1Zip.ZipProgressEventHandler">
      <summary>
        <see cref="T:C1.C1Zip.C1ZipFile" />の
        <see cref="E:C1.C1Zip.C1ZipFile.Progress" />イベントを処理するメソッドを表します。
      </summary>
    </member>
    <member name="T:C1.C1Zip.ZipProgressEventArgs">
      <summary>
        <see cref="T:C1.C1Zip.C1ZipFile" />の
        <see cref="E:C1.C1Zip.C1ZipFile.Progress" />イベントのデータを提供します。
      </summary>
    </member>
    <member name="P:C1.C1Zip.ZipProgressEventArgs.FileName">
      <summary>圧縮または展開されているファイルの名前を取得します。</summary>
    </member>
    <member name="P:C1.C1Zip.ZipProgressEventArgs.FileLength">
      <summary>圧縮または展開されているファイルの長さを取得します。</summary>
    </member>
    <member name="P:C1.C1Zip.ZipProgressEventArgs.FileLengthLong">
      <summary>圧縮または展開されているファイルの長さを取得します。</summary>
    </member>
    <member name="P:C1.C1Zip.ZipProgressEventArgs.Cancel">
      <summary>現在の操作をキャンセルする場合は true に設定します。</summary>
    </member>
    <member name="P:C1.C1Zip.ZipProgressEventArgs.Position">
      <summary>ストリーム内の現在の位置を取得します。</summary>
    </member>
    <member name="P:C1.C1Zip.ZipProgressEventArgs.PositionLong">
      <summary>ストリーム内の現在の位置を取得します。</summary>
    </member>
    <member name="T:C1.C1Zip.ZipFileException">
      <summary>無効な Zip ファイルを開こうとすると生成される例外。</summary>
    </member>
    <member name="M:C1.C1Zip.ZipFileException.#ctor(System.String)">
      <summary>
        <see cref="T:System.IO.FileLoadException" />の新しいインスタンスを初期化します。
      </summary>
      <param name="msg">例外について説明するメッセージ。</param>
    </member>
    <member name="M:C1.C1Zip.ZipFileException.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.IO.FileLoadException" />の新しいインスタンスを初期化します。
      </summary>
      <param name="msg">例外について説明するメッセージ。</param>
      <param name="filename">例外を生成したファイルの名前。</param>
    </member>
    <member name="M:C1.C1Zip.ZipFileException.#ctor(System.String,System.String,System.Exception)">
      <summary>
        <see cref="T:System.IO.FileLoadException" />の新しいインスタンスを初期化します。
      </summary>
      <param name="msg">例外について説明するメッセージ。</param>
      <param name="filename">例外を生成したファイルの名前。</param>
      <param name="innerException">内部の例外。</param>
    </member>
    <member name="T:C1.C1Zip.C1ZStreamReader">
      <summary>.NET ストリームからデータを圧縮解除します。</summary>
      <remarks>
        <para>
          圧縮されたストリームからデータを圧縮解除するには、圧縮されたストリームを
          <see cref="T:C1.C1Zip.C1ZStreamReader" />コンストラクタに渡して
          <see cref="T:C1.C1Zip.C1ZStreamReader" />オブジェクトを作成します。
        </para>
        <para>
          次に、
          <see cref="M:C1.C1Zip.C1ZStreamReader.Read(System.Byte[],System.Int32,System.Int32)" />メソッドを使って
          <see cref="T:C1.C1Zip.C1ZStreamReader" />からデータを読み取るか、
          <see cref="T:C1.C1Zip.C1ZStreamReader" />上に
          <see cref="T:System.IO.StreamReader" />を作成します。２番目のオプションは、書式設定されたデータを読み取る場合に使用します。
        </para>
      </remarks>
      <example>
        以下のコードは、メモリストリームオブジェクトに保存された文字列を圧縮解除します。
        <code><![CDATA[
          public string ExpandString(byte[] buffer)
          {
            // バッファをメモリストリームにします
            MemoryStream ms = new MemoryStream(buffer);
            
            // 圧縮解除プログラムストリームをメモリストリームにアタッチします
            C1ZStreamReader sr = new C1ZStreamReader(ms);
            
            // 圧縮解除されたデータを読み取ります
            StreamReader reader = new StreamReader(sr);
            return reader.ReadToEnd();
          }
          ]]></code></example>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream)">
      <summary>
        <see cref="T:C1.C1Zip.C1ZStreamReader" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="baseStream">圧縮データを含む入力ストリーム。</param>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean,System.Int32)">
      <summary>
        <see cref="T:C1.C1Zip.C1ZStreamReader" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="baseStream">圧縮データを含む入力ストリーム。</param>
      <param name="zip">圧縮ストリームが zip 形式で作成されているかどうかを指定します。</param>
      <param name="sizeCompressed">ストリームから読み取る圧縮データのバイト数を指定します。</param>
      <remarks>
        <paramref name="sizeCompressed" />パラメータは、１つのストリームに複数の圧縮ストリーム（zip ファイルなど）が含まれる場合にのみ必要です。このパラメータが指定されない場合、ストリームには１つの圧縮データストリームが含まれていると見なされます。
      </remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean)">
      <summary>
        <see cref="T:C1.C1Zip.C1ZStreamReader" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="baseStream">圧縮データを含む入力ストリーム。</param>
      <param name="zip">圧縮ストリームが zip 形式で作成されているかどうかを指定します。</param>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
      <summary>
        <see cref="T:C1.C1Zip.C1ZStreamReader" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="baseStream">圧縮データを含む入力ストリーム。</param>
      <param name="header">圧縮ストリームにヘッダー情報が含まれているかどうかを指定します（zip ファイル内のストリームの場合は False）。</param>
      <param name="crc32">圧縮ストリームに CRC32 チェックサムが含まれているかどうかを指定します（zip ファイル内のストリームの場合は True）。</param>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean,System.Int32,System.Int32)">
      <summary>
        <see cref="T:C1.C1Zip.C1ZStreamReader" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="baseStream">圧縮データを含む入力ストリーム。</param>
      <param name="zip">圧縮ストリームが zip 形式で作成されているかどうかを指定します。</param>
      <param name="sizeCompressed">ストリームから読み取る圧縮データのバイト数を指定します。</param>
      <param name="method">ストリームの圧縮に使用された方法を指定します。</param>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamReader.#ctor(System.IO.Stream,System.Boolean,System.Int64,System.Int32)">
      <summary>
        <see cref="T:C1.C1Zip.C1ZStreamReader" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="baseStream">圧縮データを含む入力ストリーム。</param>
      <param name="zip">圧縮ストリームが zip 形式で作成されているかどうかを指定します。</param>
      <param name="sizeCompressed">ストリームから読み取る圧縮データのバイト数を指定します。</param>
      <param name="method">ストリームの圧縮に使用された方法を指定します。</param>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamReader.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>サポートされていません。</summary>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamReader.SetLength(System.Int64)">
      <summary>基底のストリームから読み取る圧縮データのバイト数を設定します。</summary>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamReader.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>基底の圧縮ストリームからバイトシーケンスを読み取り、それをバッファに圧縮解除し、読み取られたバイト数だけストリーム内の位置を進めます。</summary>
      <param name="buf">
        バイトの配列。このメソッドが返ると、
        <paramref name="buff" />には、指定されたバイト配列の
        <paramref name="offset" />～（
        <paramref name="offset" />+
        <paramref name="count" />）の範囲の値がストリームから読み取られた非圧縮データに置き換えられて格納されます。
      </param>
      <param name="offset">
        現在のストリームから読み取るデータの保存を開始する
        <paramref name="buff" />内の位置の０から始まるバイトオフセット。
      </param>
      <param name="count">現在のストリームから読み取られる（圧縮解除された）データの最大バイト数。</param>
      <returns>バッファに読み取られたデータの合計バイト数。要求されたバイト数ほどのデータが現在ない場合、この値は要求された値より小さくなります。また、ストリームの末尾に達した場合は０になります。</returns>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamReader.ReadByte">
      <summary>ストリームから１バイトを読み取り、ストリーム内の位置を１バイトだけ進めます。ストリームの末尾の場合は -1 を返します。</summary>
      <returns>
        <see cref="T:System.Int32" />にキャストされた unsigned byte。ストリームの末尾の場合は -1。
      </returns>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamReader.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>
        このメソッドはオーバーライドされ、
        <see cref="T:C1.C1Zip.C1ZStreamReader" />クラスではサポートされません。
      </summary>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamReader.Flush">
      <summary>このストリームのすべてのバッファをクリアし、バッファされたデータがあれば基底のストリームに書き込まれます。</summary>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamReader.Close">
      <summary>
        <para>現在のストリーム圧縮プログラムを閉じ、保留データがあれば基本ストリームにフラッシュします。</para>
        <para>
          <see cref="P:C1.C1Zip.C1ZStreamReader.OwnsBaseStream" />プロパティが True（デフォルト値）に設定されている場合、このメソッドは基本ストリームも閉じ、それに関連付けられているすべてのリソース（ソケット、ファイルハンドルなど）を解放します。
        </para>
      </summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamReader.BaseStream">
      <summary>圧縮データを含む基底のストリームを取得します。</summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamReader.OwnsBaseStream">
      <summary>
        <see cref="M:C1.C1Zip.C1ZStreamReader.Close" />メソッドの呼び出しで基底のストリームも閉じるかどうかを取得または設定します（
        <see cref="P:C1.C1Zip.C1ZStreamReader.BaseStream" />を参照）。
      </summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamReader.SizeCompressed">
      <summary>ストリーム内のバイト数を取得します（圧縮バイト数）。</summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamReader.SizeUncompressed">
      <summary>ストリームに圧縮されたデータのバイト数を取得します（非圧縮バイト数）。</summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamReader.SizeCompressedLong">
      <summary>ストリーム内のバイト数を取得します（圧縮バイト数）。</summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamReader.SizeUncompressedLong">
      <summary>ストリームに圧縮されたデータのバイト数を取得します（非圧縮バイト数）。</summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamReader.ZStream">
      <summary>
        この
        <see cref="T:C1.C1Zip.C1ZStreamWriter" />でラップされた ZStream インスタンスを取得します。
      </summary>
      <remarks>このプロパティは、圧縮プログラムの低レベル動作をカスタマイズする必要がある高度なアプリケーションでのみ役立ちます。通常のアプリケーションでは必要ありません。</remarks>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamReader.CanRead">
      <summary>常に True を返します。</summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamReader.CanWrite">
      <summary>常に False を返します。</summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamReader.CanSeek">
      <summary>常に False を返します。</summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamReader.Length">
      <summary>圧縮ストリームの長さが既知の場合は、それを取得します（不明な場合は -1）。</summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamReader.Position">
      <summary>ストリーム内の位置を取得します（読み取り専用）。</summary>
    </member>
    <member name="T:C1.C1Zip.CompressionLevelEnum">
      <summary>
        <see cref="T:C1.C1Zip.C1ZipFile" />にエントリを追加するときに適用する圧縮のレベルを指定します。
      </summary>
    </member>
    <member name="F:C1.C1Zip.CompressionLevelEnum.NoCompression">
      <summary>圧縮なし。</summary>
    </member>
    <member name="F:C1.C1Zip.CompressionLevelEnum.BestSpeed">
      <summary>低圧縮、最高速。</summary>
    </member>
    <member name="F:C1.C1Zip.CompressionLevelEnum.BestCompression">
      <summary>最高圧縮、低速。</summary>
    </member>
    <member name="F:C1.C1Zip.CompressionLevelEnum.DefaultCompression">
      <summary>高圧縮、高速。</summary>
    </member>
    <member name="T:C1.C1Zip.C1ZStreamWriter">
      <summary>データを .NET ストリームに圧縮します。</summary>
      <remarks>
        <para>
          データをストリームに圧縮するには、ストリームを
          <see cref="T:C1.C1Zip.C1ZStreamWriter" />コンストラクタに渡して
          <see cref="T:C1.C1Zip.C1ZStreamWriter" />オブジェクトを作成します。
        </para>
        <para>
          次に、
          <see cref="M:C1.C1Zip.C1ZStreamWriter.Write(System.Byte[],System.Int32,System.Int32)" />メソッドを使って
          <see cref="T:C1.C1Zip.C1ZStreamWriter" />にデータを書き込むか、
          <see cref="T:C1.C1Zip.C1ZStreamWriter" />上に
          <see cref="T:System.IO.StreamWriter" />を作成します。２番目のオプションは、書式設定されたデータを書き込む場合に使用します。
        </para>
        <para>
          データの書き込みが終わったら、
          <see cref="M:C1.C1Zip.C1ZStreamWriter.Close" />メソッドを呼び出してデータをフラッシュし、基底のストリームを閉じます。
        </para>
      </remarks>
      <example>
        以下のコードは、文字列をメモリストリームに圧縮します。
        <code><![CDATA[
          public byte[] CompressString(string str)
          {
            // メモリストリームを開きます
            MemoryStream ms = new MemoryStream();
            
            // 圧縮プログラムストリームをメモリストリームにアタッチします
            C1ZStreamWriter sw = new C1ZStreamWriter(ms);
            
            // データを圧縮プログラムストリームに書き込みます
            StreamWriter writer = new StreamWriter(sw);
            writer.Write(str);
            
            // 保留中のデータをフラッシュします
            writer.Flush();
            
            // メモリバッファを返します
            return ms.ToArray();
          }
          ]]></code></example>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream)">
      <summary>
        <see cref="T:C1.C1Zip.C1ZStreamWriter" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="baseStream">圧縮データを含む出力ストリーム。</param>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,System.Boolean)">
      <summary>
        <see cref="T:C1.C1Zip.C1ZStreamWriter" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="baseStream">圧縮データを含む出力ストリーム。</param>
      <param name="zip">圧縮ストリームが zip ファイルと互換性があるかどうかを指定します。</param>
      <remarks>
        <para>zip ファイル内のストリームは、次の２点で通常の zlib ストリームとは異なります。</para>
        <para>(1) （１）zip ストリームにはローカルヘッダー情報が含まれません。この情報は zip ファイルヘッダーに保存されます。</para>
        <para>(2) （２）zip ストリームは、zlib ストリームで使用される adler32 チェックサムではなく、CRC32 チェックサムを使用します。</para>
      </remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,System.Boolean,System.Boolean)">
      <summary>
        <see cref="T:C1.C1Zip.C1ZStreamWriter" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="baseStream">圧縮データを含む出力ストリーム。</param>
      <param name="header">圧縮ストリームにヘッダー情報が含まれるかどうか（zip ファイル内のストリームの場合 False）。</param>
      <param name="crc32">圧縮ストリームに CRC32 チェックサムが含まれるかどうか（zip ファイル内のストリームの場合 True）。</param>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,C1.C1Zip.CompressionLevelEnum)">
      <summary>
        <see cref="T:C1.C1Zip.C1ZStreamWriter" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="baseStream">圧縮データを含む出力ストリーム。</param>
      <param name="level">データを圧縮するときに使用する圧縮レベル。</param>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,C1.C1Zip.CompressionLevelEnum,System.Boolean)">
      <summary>
        <see cref="T:C1.C1Zip.C1ZStreamWriter" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="baseStream">圧縮データを含む出力ストリーム。</param>
      <param name="level">データを圧縮するときに使用する圧縮レベル。</param>
      <param name="zip">圧縮ストリームが zip ファイルと互換性があるかどうかを指定します。</param>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamWriter.#ctor(System.IO.Stream,C1.C1Zip.CompressionLevelEnum,System.Boolean,System.Boolean)">
      <summary>
        <see cref="T:C1.C1Zip.C1ZStreamWriter" />クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="baseStream">圧縮データを含む出力ストリーム。</param>
      <param name="level">データを圧縮するときに使用する圧縮レベル。</param>
      <param name="header">圧縮ストリームにヘッダー情報が含まれるかどうか（zip ファイル内のストリームの場合 False）。</param>
      <param name="crc32">圧縮ストリームに CRC32 チェックサムが含まれるかどうか（zip ファイル内のストリームの場合 True）。</param>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamWriter.Seek(System.Int64,System.IO.SeekOrigin)">
      <summary>サポートされていません。</summary>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamWriter.SetLength(System.Int64)">
      <summary>サポートされていません。</summary>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamWriter.Read(System.Byte[],System.Int32,System.Int32)">
      <summary>サポートされていません。</summary>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamWriter.Write(System.Byte[],System.Int32,System.Int32)">
      <summary>バイトシーケンスを現在のストリームに書き込み、書き込まれたバイト数だけストリーム内の現在の位置を進めます。</summary>
      <param name="buf">
        バイトの配列。このメソッドは、
        <paramref name="count" />バイトを
        <paramref name="buf" />から現在のストリームにコピーします。
      </param>
      <param name="offset">
        現在のストリームにバイトのコピーを開始する
        <paramref name="buf" />内の位置の０から始まるバイトオフセット。
      </param>
      <param name="count">現在のストリームに書き込まれるデータのバイト数。</param>
      <remarks>
        データはストリームに書き込まれるときに圧縮されます。
        <paramref name="count" />バイトをストリームに書き込むと、通常、
        <paramref name="count" />より小さい数だけ位置が進みます。
      </remarks>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamWriter.Flush">
      <summary>このストリームのすべてのバッファをクリアし、バッファされたデータがあれば基底のストリームに書き込まれます。</summary>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamWriter.Close">
      <summary>
        <para>現在のストリーム圧縮プログラムを閉じ、保留データがあれば基本ストリームにフラッシュします。</para>
        <para>
          <see cref="P:C1.C1Zip.C1ZStreamWriter.OwnsBaseStream" />プロパティが True（デフォルト値）に設定されている場合、このメソッドは基本ストリームも閉じ、それに関連付けられているすべてのリソース（ソケット、ファイルハンドルなど）を解放します。
        </para>
      </summary>
    </member>
    <member name="M:C1.C1Zip.C1ZStreamWriter.WriteByte(System.Byte)">
      <summary>１バイトをストリームの現在の位置に書き込み、ストリーム内の位置を１バイトだけ進めます。</summary>
      <param name="value">ストリームに書き込まれる値。</param>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamWriter.BaseStream">
      <summary>圧縮データを受け取る基底のストリームを取得します。</summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamWriter.OwnsBaseStream">
      <summary>
        <see cref="M:C1.C1Zip.C1ZStreamWriter.Close" />メソッドの呼び出しで基底のストリームも閉じるかどうかを取得または設定します（
        <see cref="P:C1.C1Zip.C1ZStreamWriter.BaseStream" />を参照）。
      </summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamWriter.Checksum">
      <summary>ストリームの整合性をチェックするために使用されるチェックサム値を取得します。</summary>
      <remarks>
        使用されるチェックサムは、
        <see cref="T:C1.C1Zip.C1ZStreamWriter" />の作成方法に応じて Adler 値または crc32 値のいずれかになります。
      </remarks>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamWriter.SizeCompressed">
      <summary>ストリーム内のバイト数を取得します（圧縮バイト数）。</summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamWriter.SizeUncompressed">
      <summary>ストリームに圧縮されたデータのバイト数を取得します（非圧縮バイト数）。</summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamWriter.SizeCompressedLong">
      <summary>ストリーム内のバイト数を取得します（圧縮バイト数）。</summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamWriter.SizeUncompressedLong">
      <summary>ストリームに圧縮されたデータのバイト数を取得します（非圧縮バイト数）。</summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamWriter.ZStream">
      <summary>
        この
        <see cref="T:C1.C1Zip.C1ZStreamWriter" />でラップされた ZStream インスタンスを取得します。
      </summary>
      <remarks>このプロパティは、圧縮プログラムの低レベル動作をカスタマイズする必要がある高度なアプリケーションでのみ役立ちます。通常のアプリケーションでは必要ありません。</remarks>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamWriter.CanRead">
      <summary>常に False を返します。</summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamWriter.CanWrite">
      <summary>常に True を返します。</summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamWriter.CanSeek">
      <summary>常に False を返します。</summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamWriter.Length">
      <summary>基底のストリームの長さをバイト数で返します。</summary>
    </member>
    <member name="P:C1.C1Zip.C1ZStreamWriter.Position">
      <summary>ストリーム内の位置を取得します（読み取り専用）。</summary>
    </member>
    <member name="T:C1.C1Zip.ZLib.ZStream">
      <summary>
        <b>ZStream</b>は、
        <b>C1.C1Zip</b>アセンブリの中で最も柔軟ですが、使いこなすことが難しいクラスです。このクラスには、ZLIB の zstream オブジェクトの C# 実装が汎用の圧縮/圧縮解除プログラムとして含まれています。
      </summary>
      <remarks>
        <para>
          通常は、
          <b>ZStream</b>の代わりに
          <see cref="T:C1.C1Zip.C1ZStreamReader" />クラスと
          <see cref="T:C1.C1Zip.C1ZStreamWriter" />クラスを使用できます。これらのクラスは、わかりやすく使いやすいラッパーとして ZLIB の複雑さを覆い隠します。
        </para>
        <para>
          ZLIB に精通しており、データ圧縮/圧縮解除プロセスを低レベルで制御する必要がある場合（独自のバッファや圧縮辞書を提供する場合など）にのみ、
          <b>ZStream</b>を使用します。
        </para>
        <para>
          <b>ZStream</b>を直接使用し、テクニカルサポートが必要な場合は、http://www.info-zip.org/、http://www.gzip.org/、zlib 公式サイトなどから入手できる詳細なドキュメント、サンプル、および記事を参照してください。
        </para>
        <para>ZLIB は、Jean-Loup Gailly と Mark Adler が作成したオープンソース、無償特許のライブラリです。</para>
      </remarks>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.Z_OK">
      <summary>エラーはありません。</summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.Z_STREAM_END">
      <summary>ストリームの末尾が検出されました。</summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.Z_NEED_DICT">
      <summary>この時点でプリセット辞書が必要です。</summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.Z_ERRNO">
      <summary>ファイルエラーです。</summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.Z_STREAM_ERROR">
      <summary>ストリーム構造体が矛盾しています（たとえば、入力/出力バッファが null）。</summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.Z_DATA_ERROR">
      <summary>入力データが破損しています（形式またはチェックサムが不正）。</summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.Z_MEM_ERROR">
      <summary>メモリ不足です。</summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.Z_BUF_ERROR">
      <summary>処理を続行できないか、出力バッファに空きがありません。</summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.Z_VERSION_ERROR">
      <summary>互換性のない ZLIB バージョン。</summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.next_in">
      <summary>入力バッファ。</summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.next_in_index">
      <summary>入力バッファのカーソルの位置。</summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.avail_in">
      <summary>入力バッファで使用できるバイト数。</summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.total_in">
      <summary>これまで読み取られた入力データの合計バイト数。</summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.next_out">
      <summary>出力バッファ。</summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.next_out_index">
      <summary>出力バッファのカーソルの位置。</summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.avail_out">
      <summary>出力バッファに残っている空きバイト数。</summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.total_out">
      <summary>これまでに出力されたデータの合計バイト数。</summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.msg">
      <summary>最後のエラーの説明（エラーがない場合は null）。</summary>
    </member>
    <member name="F:C1.C1Zip.ZLib.ZStream.adler">
      <summary>現在のチェックサム値（Adler または CRC32）。</summary>
    </member>
    <member name="M:C1.C1Zip.ZLib.ZStream.#ctor">
      <summary>
        Adler チェックサムを使用して、
        <b>ZStream</b>クラスの新しいインスタンスを初期化します。
      </summary>
    </member>
    <member name="M:C1.C1Zip.ZLib.ZStream.#ctor(System.Boolean)">
      <summary>
        <b>ZStream</b>クラスの新しいインスタンスを初期化します。
      </summary>
      <param name="crc32">
        CRC32 チェックサムを使用する場合は
        <b>True</b>、Adler チェックサムを使用する場合は
        <b>False</b>。
      </param>
      <remarks>CRC32 チェックサムは、zip ファイルで使用される標準です。Adler チェックサムは、ZLIB のデフォルトです。Adler チェックサムは計算が高速ですが、zip 形式とは互換性がありません。</remarks>
    </member>
    <member name="M:C1.C1Zip.ZLib.ZStream.inflateInit">
      <summary>内部ストリームの状態を圧縮解除に初期化します。</summary>
      <returns>成功した場合は０、失敗した場合はエラーコード。</returns>
      <remarks>
        <para>
          フィールド
          <see cref="F:C1.C1Zip.ZLib.ZStream.next_in" />および
          <see cref="F:C1.C1Zip.ZLib.ZStream.avail_in" />は、呼び出し元で初期化しておく必要があります。
        </para>
        <para>
          <b>inflateInit</b>は、zlib ヘッダー（ある場合）を読み取る以外は、何も圧縮解除を実行しません。データの圧縮解除は、
          <see cref="M:C1.C1Zip.ZLib.ZStream.inflate(System.Int32)" />メソッドによって実行されます。したがって、
          <b>next_in</b>と
          <b>avail_in</b>は変更される場合がありますが、
          <b>next_out</b>と
          <b>avail_out</b>は変更されません。
        </para>
      </remarks>
    </member>
    <member name="M:C1.C1Zip.ZLib.ZStream.inflateInit(System.Int32)">
      <summary>内部ストリームの状態を圧縮解除に初期化します。</summary>
      <param name="bits">LZ77 スライド圧縮ウィンドウのサイズ（ビット数）。デフォルト値は 15 ビットです。</param>
      <returns>成功した場合は０、失敗した場合はエラーコード。</returns>
    </member>
    <member name="M:C1.C1Zip.ZLib.ZStream.inflate(System.Int32)">
      <summary>入力バッファを使い切るか、出力バッファがいっぱいになるまで、できる限り多くのデータを圧縮解除します。</summary>
      <param name="flush">出力バッファにデータをフラッシュする方法（デフォルト値は２）。</param>
      <returns>
        何らかの処理が行われた場合（さらに入力が処理されたか、出力が生成された場合）は、
        <b>Z_OK</b>。圧縮データの末尾に到達し、すべての圧縮解除出力が生成された場合は、
        <b>Z_STREAM_END</b>。この時点でプリセット辞書が必要な場合は、
        <b>Z_NEED_DICT</b>。入力データが破損していた場合（入力ストリームが zlib 形式に準拠していないか、チェックサムが不正な場合）は、
        <b>Z_DATA_ERROR</b>。ストリーム構造体が矛盾していた場合（たとえば、
        <b>next_in</b>または
        <b>next_out</b>が null の場合）は、
        <b>Z_STREAM_ERROR</b>。メモリ不足の場合は、
        <b>Z_MEM_ERROR</b>。
        <b>Z_FINISH</b>が使用されているが、処理を続行できないか、出力バッファに空きがなかった場合は、
        <b>Z_BUF_ERROR</b>。
      </returns>
      <remarks>
        <para>
          <b>inflate</b>は、次のアクションの一方または両方を実行します。
        </para>
        <para>
          1.
          <b>next_in</b>の位置から入力データを圧縮解除し、それに応じて
          <b>next_in</b>と
          <b>avail_in</b>を更新します。（出力バッファに空きがないために）一部の入力が処理されなくても、
          <b>next_in</b>が更新され、次回の inflate の呼び出しではこの位置から処理が再開されます。
        </para>
        <para>
          2.
          <b>next_out</b>の位置からさらに出力を提供し、それに応じて
          <b>next_out</b>と
          <b>avail_out</b>を更新します。
          <b>inflate</b>は、入力データがなくなるか、出力バッファの空きがなくなるまで、できる限り多くの出力を提供します。
        </para>
        <para>
          inflate を呼び出す前に、少なくとも一方のアクションを実行できるようにしておく必要があります。つまり、入力を追加したり出力を取り出し、それに応じて
          <b>next_*</b>と
          <b>avail_*</b>の値を更新します。
        </para>
        <para>
          <b>inflate</b>が０を返し、
          <b>avail_out</b>== 0 の場合は、保留中の出力がある可能性があるため、出力バッファに空きを作った後で再度
          <b>inflate</b>を呼び出す必要があります。
        </para>
        <para>
          アプリケーションは、出力バッファがいっぱい（
          <b>avail_out</b>== 0）の場合や
          <b>inflate</b>を呼び出すたびなど、必要なときに圧縮解除出力を取り出すことができます。
        </para>
        <para>強制的にフラッシュされない限り、このメソッドでは、多少の出力遅延（入力を読み取るが、出力が生成されない）が発生する場合があります。</para>
      </remarks>
    </member>
    <member name="M:C1.C1Zip.ZLib.ZStream.inflateEnd">
      <summary>このストリームに動的に割り当てられたデータ構造体をすべて解放し、未処理の入力を破棄し、保留中の出力はフラッシュしません。</summary>
      <returns>成功した場合は０、失敗した場合はエラーコード。</returns>
    </member>
    <member name="M:C1.C1Zip.ZLib.ZStream.inflateSync">
      <summary>完全なフラッシュポイントが見つかるか、すべての入力がスキップされるまで、無効な圧縮データをスキップします。出力は提供されません。</summary>
      <returns>成功した場合は０、失敗した場合はエラーコード。</returns>
    </member>
    <member name="M:C1.C1Zip.ZLib.ZStream.inflateSetDictionary(System.Byte[],System.Int32)">
      <summary>指定された非圧縮バイトシーケンスから圧縮解除辞書を初期化します。</summary>
      <param name="dictionary">辞書のデータ。</param>
      <param name="dictLength">辞書のバイト数。</param>
      <returns>成功した場合は０、失敗した場合はエラーコード。</returns>
      <remarks>
        <para>
          このメソッドは、
          <see cref="M:C1.C1Zip.ZLib.ZStream.inflate(System.Int32)" />を呼び出して
          <b>Z_NEED_DICT</b>が返された場合に、この呼び出しの直後に呼び出す必要があります。圧縮プログラムによって選択される辞書は、この
          <b>inflate</b>への呼び出しから返された
          <b>Adler32</b>値によって決定されます。
        </para>
        <para>
          圧縮プログラムと圧縮解除プログラムは、まったく同じ辞書を使用する必要があります（
          <see cref="M:C1.C1Zip.ZLib.ZStream.deflateSetDictionary(System.Byte[],System.Int32)" />メソッドを参照）。
        </para>
      </remarks>
    </member>
    <member name="M:C1.C1Zip.ZLib.ZStream.deflateInit(System.Int32)">
      <summary>内部ストリームの状態を圧縮に初期化します。</summary>
      <param name="level">０～９の圧縮レベル。</param>
      <returns>成功した場合は０、失敗した場合はエラーコード。</returns>
      <remarks>
        <para>圧縮レベル１が最高速、９が最高圧縮度になります。</para>
        <para>圧縮レベル０は、圧縮を行いません（入力データが１ブロック単位でコピーされるだけ）。</para>
        <para>デフォルトの圧縮レベルは６で、速度と圧縮度の程よい両立点です。</para>
      </remarks>
    </member>
    <member name="M:C1.C1Zip.ZLib.ZStream.deflateInit(System.Int32,System.Int32)">
      <summary>内部ストリームの状態を圧縮に初期化します。</summary>
      <param name="level">０～９の圧縮レベル。</param>
      <param name="bits">LZ77 スライド圧縮ウィンドウのサイズ（ビット数）。デフォルト値は 15 ビットです。</param>
      <returns>成功した場合は０、失敗した場合はエラーコード。</returns>
      <remarks>
        <para>圧縮レベル１が最高速、９が最高圧縮度になります。</para>
        <para>圧縮レベル０は、圧縮を行いません（入力データが１ブロック単位でコピーされるだけ）。</para>
        <para>デフォルトの圧縮レベルは６で、速度と圧縮度の程よい両立点です。</para>
      </remarks>
    </member>
    <member name="M:C1.C1Zip.ZLib.ZStream.deflate(System.Int32)">
      <summary>できる限り多くのデータを圧縮し、入力バッファが空になるか出力バッファがいっぱいになると停止します。</summary>
      <param name="flush">出力バッファにデータのフラッシュを強制する場合は０以外の値。</param>
      <returns>成功した場合は０、失敗した場合はエラーコード。</returns>
      <remarks>
        <para>
          <b>deflate</b>は、次のアクションの一方または両方を実行します。
        </para>
        <para>
          1.
          <b>next_in</b>の位置から入力データを圧縮し、それに応じて
          <b>next_in</b>と
          <b>avail_in</b>を更新します。（出力バッファに空きがないために）一部の入力が処理されなくても、
          <b>next_in</b>と
          <b>avail_in</b>が更新され、次回の
          <b>deflate</b>の呼び出しではこの位置から処理が再開されます。
        </para>
        <para>
          2.
          <b>next_out</b>の位置から出力を提供し、それに応じて
          <b>next_out</b>と
          <b>avail_out</b>を更新します。このアクションは、パラメータ
          <paramref name="flush" />が０以外の場合に実行されます。フラッシュの実行によって圧縮率が低下する場合があるため、このパラメータは必要な場合にのみ（対話式のアプリケーションで）設定してください。flush パラメータが設定されていなくても、いくらかの出力は提供されます。
        </para>
        <para>強制的にフラッシュされない限り、このメソッドでは、多少の出力遅延（入力を読み取るが、出力が生成されない）が発生する場合があります。</para>
        <para>
          <b>deflate</b>が
          <b>avail_out</b>== 0 の状態で戻る場合は、フラッシュが完了するまで（
          <b>deflate</b>が
          <b>avail_out</b>!= 0 の状態で戻るまで）、同じ
          <paramref name="flush" />パラメータの値を使用し、出力スペースを追加して、このメソッドを再度呼び出す必要があります。
        </para>
      </remarks>
    </member>
    <member name="M:C1.C1Zip.ZLib.ZStream.deflateEnd">
      <summary>このストリームに動的に割り当てられたデータ構造体をすべて解放し、未処理の入力を破棄し、保留中の出力はフラッシュしません。</summary>
      <returns>成功した場合は０、失敗した場合はエラーコード。</returns>
    </member>
    <member name="M:C1.C1Zip.ZLib.ZStream.deflateParams(System.Int32,System.Int32)">
      <summary>圧縮レベルと圧縮方法を動的に更新します。</summary>
      <param name="level">０～９の圧縮レベル。</param>
      <param name="strategy">圧縮方法（０～２）。</param>
      <returns>
      </returns>
    </member>
    <member name="M:C1.C1Zip.ZLib.ZStream.deflateSetDictionary(System.Byte[],System.Int32)">
      <summary>圧縮出力を生成せずに、指定されたバイトシーケンスから圧縮辞書を初期化します。</summary>
      <param name="dictionary">辞書のデータ。</param>
      <param name="dictLength">辞書のバイト数。</param>
      <returns>成功した場合は０、失敗した場合はエラーコード。</returns>
      <remarks>
        <para>
          このメソッドは、
          <see cref="M:C1.C1Zip.ZLib.ZStream.deflateInit(System.Int32)" />の直後、つまり
          <see cref="M:C1.C1Zip.ZLib.ZStream.deflate(System.Int32)" />を呼び出す前に呼び出す必要があります。
        </para>
        <para>
          圧縮プログラムと圧縮解除プログラムは、まったく同じ辞書を使用する必要があります（
          <see cref="M:C1.C1Zip.ZLib.ZStream.inflateSetDictionary(System.Byte[],System.Int32)" />を参照）。
        </para>
      </remarks>
    </member>
    <member name="T:C1.C1Zip.ZLib.ZStreamException">
      <summary>圧縮ストリームとの間の読み取りまたは書き出しが失敗したときにスローされる例外。</summary>
    </member>
    <member name="P:C1.C1Zip.C1ZipFile.UseUtf8Encoding">
      <summary>
        ファイル名およびコメントを UTF8 形式で保存するかどうかを決定します。
      </summary>
      <remarks>
        <para>
          ZIP 仕様は、埋め込まれるファイル名やコメントに対してどの文字エンコードを使用するかを
          指定していません。オリジナルの IBM PC 文字エンコードセット
          （IBM コードページ 437）が唯一サポートされるエンコードと見なされます。
          このため、一部の zip ユーティリティでは、Unicode 文字のファイル名やコメント
          を保存できません。保存できる場合でも、他のユーティリティがそれらのファイル名やコメントを
          正しく読み取れないことがあります。
        </para>
        <para>
          <b>UseUtf8Encoding</b> を true に設定すると、C1Zip は、Unicode 文字を使用できるように、
          UTF8 エンコードを使用してファイル名やコメントを保存および取得します。
          ただし、他の zip ユーティリティでは、これらの Unicode ファイル名を正しく読み取れないことがあります。
        </para>
      </remarks>
    </member>
    <member name="T:C1.C1Zip.ZipEncoding">
      <summary>
        エントリの名前とコメントに使用されるエンコーディング。
        デフォルトのエンコードは <see cref="P:System.Text.Encoding.UTF8" /> です。
      </summary>
      <remarks>
        このクラスは圧縮には影響しません。エントリの名前とコメントのエンコードとデコードに
        使用されるだけです。

        ZIP 形式の初期のバージョンは UTF-8 をサポートしていませんでした。そのため、古い zip ユーティリティはこの形式を認識しない場合があります。
        下位互換性が必要な場合は、Encoding プロパティを他の値に変更してください。

        論理的には Encoding.Default が正しい選択に思えますが、万国のロケールには機能しません。
        代わりに、現在の OEMCodePage を使用してエンコードを作成する必要があります。
        これにより、ファイル名にアクセント文字や万国の文字を使用できます。
        たとえば、Windows に付属する zip と同様に、"Åland.txt"、"Äiti.txt"、
        "Würth.txt" などの名前を使用できます。
      </remarks>
    </member>
    <member name="P:C1.C1Zip.ZipEncoding.Encoding">
      <summary>
        エントリ名とコメントに使用されるエンコーディングを取得または設定します。
        デフォルトのエンコードは <see cref="P:System.Text.Encoding.UTF8" /> です。
      </summary>
    </member>
  </members>
</doc>